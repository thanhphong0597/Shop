// <auto-generated />
using DoAn.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoAn.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221030045857_sadf")]
    partial class sadf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoAn.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Name = "Giay"
                        },
                        new
                        {
                            CategoryID = 2,
                            Name = "Ao"
                        },
                        new
                        {
                            CategoryID = 3,
                            Name = "Quan"
                        });
                });

            modelBuilder.Entity("DoAn.Entities.Color", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorID");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("DoAn.Entities.GenericShoes", b =>
                {
                    b.Property<int>("GenericShoesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenericShoesID"), 1L, 1);

                    b.Property<int>("Category_ID")
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenericShoesID");

                    b.HasIndex("Category_ID");

                    b.ToTable("GenericShoes");
                });

            modelBuilder.Entity("DoAn.Entities.Size", b =>
                {
                    b.Property<int>("SizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeID");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("DoAn.Entities.SpecificShoes", b =>
                {
                    b.Property<int>("SpecificShoesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecificShoesID"), 1L, 1);

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("SpecificShoesID");

                    b.ToTable("SpecificShoes");
                });

            modelBuilder.Entity("DoAn.Entities.SubTable.Shoes_Color", b =>
                {
                    b.Property<int>("ShoesID")
                        .HasColumnType("int");

                    b.Property<int>("ColorID")
                        .HasColumnType("int");

                    b.HasKey("ShoesID", "ColorID");

                    b.HasIndex("ColorID");

                    b.ToTable("Shoes_Color", (string)null);
                });

            modelBuilder.Entity("DoAn.Entities.SubTable.Shoes_Gen", b =>
                {
                    b.Property<int>("ShoesID")
                        .HasColumnType("int");

                    b.Property<int>("GenericShoesID")
                        .HasColumnType("int");

                    b.HasKey("ShoesID", "GenericShoesID");

                    b.HasIndex("GenericShoesID");

                    b.ToTable("Shoes_Gen", (string)null);
                });

            modelBuilder.Entity("DoAn.Entities.SubTable.Shoes_Size", b =>
                {
                    b.Property<int>("ShoesID")
                        .HasColumnType("int");

                    b.Property<int>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("ShoesID", "SizeID");

                    b.HasIndex("SizeID");

                    b.ToTable("Shoes_Size", (string)null);
                });

            modelBuilder.Entity("DoAn.Entities.GenericShoes", b =>
                {
                    b.HasOne("DoAn.Entities.Category", "Category")
                        .WithMany("GenericShoes")
                        .HasForeignKey("Category_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DoAn.Entities.SubTable.Shoes_Color", b =>
                {
                    b.HasOne("DoAn.Entities.Color", "Color")
                        .WithMany("Shoes_Colors")
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAn.Entities.SpecificShoes", "SpecificShoes")
                        .WithMany("Shoes_Colors")
                        .HasForeignKey("ShoesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("SpecificShoes");
                });

            modelBuilder.Entity("DoAn.Entities.SubTable.Shoes_Gen", b =>
                {
                    b.HasOne("DoAn.Entities.GenericShoes", "GenericShoes")
                        .WithMany("Shoes_Gens")
                        .HasForeignKey("GenericShoesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAn.Entities.SpecificShoes", "SpecificShoes")
                        .WithMany("Shoes_Gens")
                        .HasForeignKey("ShoesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenericShoes");

                    b.Navigation("SpecificShoes");
                });

            modelBuilder.Entity("DoAn.Entities.SubTable.Shoes_Size", b =>
                {
                    b.HasOne("DoAn.Entities.SpecificShoes", "SpecificShoes")
                        .WithMany("Shoes_Sizes")
                        .HasForeignKey("ShoesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAn.Entities.Size", "Size")
                        .WithMany("Shoes_Sizes")
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Size");

                    b.Navigation("SpecificShoes");
                });

            modelBuilder.Entity("DoAn.Entities.Category", b =>
                {
                    b.Navigation("GenericShoes");
                });

            modelBuilder.Entity("DoAn.Entities.Color", b =>
                {
                    b.Navigation("Shoes_Colors");
                });

            modelBuilder.Entity("DoAn.Entities.GenericShoes", b =>
                {
                    b.Navigation("Shoes_Gens");
                });

            modelBuilder.Entity("DoAn.Entities.Size", b =>
                {
                    b.Navigation("Shoes_Sizes");
                });

            modelBuilder.Entity("DoAn.Entities.SpecificShoes", b =>
                {
                    b.Navigation("Shoes_Colors");

                    b.Navigation("Shoes_Gens");

                    b.Navigation("Shoes_Sizes");
                });
#pragma warning restore 612, 618
        }
    }
}
